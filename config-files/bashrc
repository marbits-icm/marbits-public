# .bashrc
#
#########################################
#
#  This is an example of a bashrc file
#  with several configuration additions.
#  Try it and copy the block or function
#  that works for you
#
#########################################
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
############################################
alias ll="ls -lh --group-directories-first"
alias lt="ls -lhrt --group-directories-first"
alias mkpr="mkdir -p {docs/{reading,writing,slides},data,code,output/{logs,figures}}"

# SLURM aliases
############################################
alias sq="squeue -o \"%10A %12j %5K %10u %8a %10P %3t %10M %6D %6C %10f %R\" -u $(whoami)"
alias sqa="squeue -ao \"%10A %12j %5K %10u %8a %10P %3t %10M %6D %6C %10f %R\""
alias si="sinfo -o \"%14R %10n %5a %7t %6c %8O %8m %8e %7z %60E\""
alias sacct="sacct --format=jobid,jobname,submit,start,end,elapsed,ncpus,ntasks,MaxVMSize,AllocNodes,state"

# coloring prompt
# check and build colors here: http://ezprompt.net/
###################################################
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    #PS1='${debian_chroot:+($debian_chroot)}[\[\033[0;31m\]\u@\h\[\033[00m\] \[\033[0;34m\]\W\[\033[00m\]]\$ '
    PS1="\[\e[37m\][\[\e[m\]\[\e[31m\]\u\[\e[m\]\[\e[31m\]@\[\e[m\]\[\e[31m\]\h\[\e[m\] \[\e[36m\]\W\[\e[m\]\[\e[37m\]]\[\e[m\]\[\e[31m\]\\$\[\e[m\] "
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h \W\$ '
fi
unset color_prompt force_color_prompt


# quickly create and navigate with shortcuts
# from: http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
############################################
export MARKPATH=$HOME/.marks
function jump { 
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark { 
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark { 
    rm -i "$MARKPATH/$1"
}
function marks {
    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
}
_completemarks() {
  local curw=${COMP_WORDS[COMP_CWORD]}
  local wordlist=$(find $MARKPATH -type l -printf "%f\n")
  COMPREPLY=($(compgen -W '${wordlist[@]}' -- "$curw"))
  return 0
}

complete -F _completemarks jump unmark
# end

# inspect the first and last 3 lines of a file:
# Got from Vince Buffalo's 'Bioinformatics data skills'
############################################
i() { 
 (head -n 3 ; tail -n 3) < "$1" | column -t 
}
